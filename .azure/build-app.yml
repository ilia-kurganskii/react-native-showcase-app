trigger:
  branches:
    include:
      - master
variables:
  - name: GRADLE_USER_HOME
    value: $(Pipeline.Workspace)/.gradle
  - name: YARN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.yarn
  - group: Mobile # change it to the name you have set

jobs:
  - job: build-android
    timeoutInMinutes: 30
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - bash: echo "Hello world"
      - checkout: self
        persistCredentials: true
        clean: true
      - task: Cache@2
        inputs:
          key: 'yarn | "$(Agent.OS)" | yarn.lock'
          restoreKeys: |
            yarn | "$(Agent.OS)"
            yarn
          path: $(YARN_CACHE_FOLDER)
        displayName: Cache Yarn packages
      - task: NodeTool@0
        displayName: 'Install Node'
        inputs:
          versionSpec: '18.16.1' # you can use your desired version here
      - script: yarn install --frozen-lockfile
        displayName: Install Node Dependencies
      - task: Cache@2
        inputs:
          key: 'gradle | "$(Agent.OS)"' # Swap build.gradle.kts for build.gradle when using Groovy
          restoreKeys: |
            gradle | "$(Agent.OS)"
            gradle
          path: $(GRADLE_USER_HOME)
        displayName: Configure gradle caching
      - task: Gradle@3
        displayName: 'Build APK'
        inputs:
          gradleWrapperFile: 'android/gradlew'
          workingDirectory: 'android/'
          tasks: 'assembleRelease'
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          options: '--build-cache'
          gradleOptions: '-Xmx3072m'
          sonarQubeRunAnalysis: false
      - script: |   
          # stop the Gradle daemon to ensure no files are left open (impacting the save cache operation later)
          ./gradlew --stop    
        displayName: Gradlew stop
      - task: PublishBuildArtifacts@1
        displayName: 'Publish APK to artifacts'
        inputs:
          PathtoPublish: 'android/app/build/outputs/apk/release'
          ArtifactName: 'android'
          publishLocation: 'Container'
  - job: build-ios
    timeoutInMinutes: 60
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: Cache@2
        inputs:
          key: 'yarn | "$(Agent.OS)" | yarn.lock'
          restoreKeys: |
            yarn | "$(Agent.OS)"
            yarn
          path: $(YARN_CACHE_FOLDER)
        displayName: Cache Yarn packages
      - task: NodeTool@0
        displayName: 'Install Node'
        inputs:
          versionSpec: '18.16.1' # you can use your desired version here
      - script: yarn install --frozen-lockfile
        displayName: Install Node Dependencies
      - task: Cache@2
        inputs:
          key: 'pods | "$(Agent.OS)" | ios/Podfile.lock'
          path: 'ios/Pods'
          cacheHitVar: 'PODS_CACHE_RESTORED'
      - task: CocoaPods@0
        displayName: 'pod install using the CocoaPods task with defaults'
        condition: ne(variables.PODS_CACHE_RESTORED, 'true')
        inputs:
          workingDirectory: 'ios'
      - task: Xcode@5
        displayName: 'Build Release App'
        inputs:
          actions: 'build'
          configuration: 'Release'
          sdk: 'iphonesimulator'
          xcWorkspacePath: 'ios/NucleusUiPatternExamples.xcworkspace'
          scheme: 'NucleusUiPatternExamples'
          packageApp: false
          exportPath: 'output'
      - task: CopyFiles@2
        displayName: 'Copy App'
        inputs:
          contents: '**/*.app'
          targetFolder: '$(build.artifactStagingDirectory)'
          overWrite: true
          flattenFolders: true
      - task: PublishBuildArtifacts@1
        displayName: 'Publish IPA to artifacts'
        inputs:
          PathtoPublish: '$(build.artifactStagingDirectory)'
          ArtifactName: 'ios'
          publishLocation: 'Container'