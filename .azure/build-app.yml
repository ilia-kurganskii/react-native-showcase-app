trigger:
  branches:
    include:
      - master

jobs:
  - job: build_android
    timeoutInMinutes: 30
    pool:
      vmImage: 'ubuntu-latest'
    variables:
    - name: GRADLE_USER_HOME
      value: $(Pipeline.Workspace)/.gradle
    - name: YARN_CACHE_FOLDER
      value: $(Pipeline.Workspace)/.yarn
    - group: Mobile # change it to the name you have set
    steps:
      - checkout: self
        persistCredentials: true
        clean: true
      - task: Cache@2
        inputs:
          key: 'yarn | "$(Agent.OS)" | yarn.lock'
          restoreKeys: |
            yarn | "$(Agent.OS)"
            yarn
          path: $(YARN_CACHE_FOLDER)
        displayName: Cache Yarn packages
      - task: NodeTool@0
        displayName: 'Install Node'
        inputs:
          versionSpec: '18.16.1' # you can use your desired version here
      - script: yarn install --frozen-lockfile
        displayName: Install Node Dependencies
      - task: Cache@2
        inputs:
          key: 'gradle | "$(Agent.OS)"' # Swap build.gradle.kts for build.gradle when using Groovy
          restoreKeys: |
            gradle | "$(Agent.OS)"
            gradle
          path: $(GRADLE_USER_HOME)
        displayName: Configure gradle caching
      - task: Gradle@3
        displayName: 'Build APK'
        inputs:
          gradleWrapperFile: 'android/gradlew'
          workingDirectory: 'android/'
          tasks: 'assembleRelease'
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          options: '--build-cache'
          gradleOptions: '-Xmx3072m'
          sonarQubeRunAnalysis: false
      - script: |   
          # stop the Gradle daemon to ensure no files are left open (impacting the save cache operation later)
          ./android/gradlew --stop
        displayName: Gradlew stop
      - task: PublishBuildArtifacts@1
        displayName: 'Publish APK to artifacts'
        inputs:
          PathtoPublish: 'android/app/build/outputs/apk/release'
          ArtifactName: 'android'
          publishLocation: 'Container'
  - job: build_ios
    timeoutInMinutes: 60
    pool:
      vmImage: 'macos-latest'
    variables:
      - name: GRADLE_USER_HOME
        value: $(Pipeline.Workspace)/.gradle
      - name: YARN_CACHE_FOLDER
        value: $(Pipeline.Workspace)/.yarn
      - group: Mobile # change it to the name you have set
    steps:
      - checkout: self
        persistCredentials: true
        clean: true
      - task: Cache@2
        inputs:
          key: 'yarn | "$(Agent.OS)" | yarn.lock'
          restoreKeys: |
            yarn | "$(Agent.OS)"
            yarn
          path: $(YARN_CACHE_FOLDER)
        displayName: Cache Yarn packages
      - task: NodeTool@0
        displayName: 'Install Node'
        inputs:
          versionSpec: '18.16.1' # you can use your desired version here
      - script: yarn install --frozen-lockfile
        displayName: Install Node Dependencies
      - task: Cache@2
        inputs:
          key: 'pods | "$(Agent.OS)" | ios/Podfile.lock'
          path: 'ios/Pods'
          cacheHitVar: 'PODS_CACHE_RESTORED'
      - task: CocoaPods@0
        displayName: 'pod install using the CocoaPods task with defaults'
        condition: ne(variables.PODS_CACHE_RESTORED, 'true')
        inputs:
          workingDirectory: 'ios'
      - task: Xcode@5
        displayName: 'Build Release App'
        inputs:
          actions: 'build'
          configuration: 'Release'
          sdk: 'iphonesimulator'
          xcWorkspacePath: 'ios/NucleusUiPatternExamples.xcworkspace'
          scheme: 'NucleusUiPatternExamples'
          packageApp: false
          args: '-derivedDataPath $(Pipeline.Workspace)/ios/output/'
      - task: CopyFiles@2
        displayName: 'Copy App'
        inputs:
          SourceFolder: '$(Pipeline.Workspace)/ios/output/Build/Products/Release-iphonesimulator/'
          Contents: |
            **/*.app/**
          targetFolder: '$(build.artifactStagingDirectory)'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish IPA to artifacts'
        inputs:
          PathtoPublish: '$(build.artifactStagingDirectory)'
          ArtifactName: 'ios'
          publishLocation: 'Container'
  - job: maestro_android
    dependsOn:
      - build_android
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      - group: Mobile # change it to the name you have set
    steps:
      - checkout: self
        persistCredentials: true
        clean: true
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          itemPattern: '**/*.apk'
          downloadPath: '$(System.ArtifactsDirectory)'
      - script: curl -Ls "https://get.maestro.mobile.dev" | bash
        displayName: 'Install Maestro CLI'
      - script: |
          $HOME/.maestro/bin/maestro cloud \
            --apiKey $(MAESTRO_CLOUD_API_KEY) \
            -e APP_ID="com.nucleusuipatternexamples" \
            $(System.ArtifactsDirectory)/android/app-release.apk \
            .maestro
        displayName: 'Run Maestro Cloud for Android'
  - job: maestro_ios
    dependsOn:
      - build_ios
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      - group: Mobile # change it to the name you have set
    steps:
      - checkout: self
        persistCredentials: true
        clean: true
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          itemPattern: '**/*.app/**'
          downloadPath: '$(System.ArtifactsDirectory)'
      - script: curl -Ls "https://get.maestro.mobile.dev" | bash
        displayName: 'Install Maestro CLI'
      - script: |
          $HOME/.maestro/bin/maestro cloud \
            --apiKey $(MAESTRO_CLOUD_API_KEY) \
            -e APP_ID="dev.kurganskii.showcaseapp" \
            $(System.ArtifactsDirectory)/ios/NucleusUiPatternExamples.app \
            .maestro
        displayName: 'Run Maestro Cloud for iOS'
